"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var AccountingAPIClient_1 = require("../AccountingAPIClient");
var privateKey_helpers_1 = require("../internals/__tests__/helpers/privateKey-helpers");
var fs = require("fs");
var path = require("path");
var guid1 = 'dcb417fc-0c23-4ba3-bc7f-fbc718e7e663';
var xeroConfig = {
    appType: 'private',
    consumerKey: 'RDGDV41TRLQZDFSDX96TKQ2KRJIW4C',
    consumerSecret: 'DJ3CMGDB0DIIA9DNEEJMRLZG0BWE7Y',
    privateKeyPath: privateKey_helpers_1.validTestCertPath()
};
describe('AccountingAPI attachments', function () {
    var writeBinaryResponseToStreamSpy = jest.fn();
    var readStreamToRequestSpy = jest.fn();
    var oAuth1HttpClient = {
        get: undefined,
        put: undefined,
        post: undefined,
        delete: undefined,
        writeUTF8ResponseToStream: undefined,
        writeBinaryResponseToStream: writeBinaryResponseToStreamSpy,
        readStreamToRequest: readStreamToRequestSpy,
        getRequestToken: undefined,
        buildAuthoriseUrl: undefined,
        swapRequestTokenforAccessToken: undefined,
        refreshAccessToken: undefined
    };
    var tempAttachmentLocation = path.resolve(__dirname, 'temp-image.jpg');
    var localAttachmentLocation = path.resolve(__dirname, 'helpers', 'bean.jpg');
    var fixtures = {
        invoices: [
            { expectedPath: "invoices/" + guid1 + "/attachments/bean.jpg", args: { mimeType: 'image/jpg', pathToSave: tempAttachmentLocation, entityID: guid1, fileName: 'bean.jpg' } }
        ],
        bankTransactions: [
            { expectedPath: "banktransactions/" + guid1 + "/attachments/bean.jpg", args: { mimeType: 'image/jpg', pathToSave: tempAttachmentLocation, entityID: guid1, fileName: 'bean.jpg' } }
        ],
        creditNotes: [
            { expectedPath: "creditnotes/" + guid1 + "/attachments/bean.jpg", args: { mimeType: 'image/jpg', pathToSave: tempAttachmentLocation, entityID: guid1, fileName: 'bean.jpg' } }
        ],
        repeatingInvoices: [
            { expectedPath: "repeatinginvoices/" + guid1 + "/attachments/bean.jpg", args: { mimeType: 'image/jpg', pathToSave: tempAttachmentLocation, entityID: guid1, fileName: 'bean.jpg' } }
        ],
        bankTransfers: [
            { expectedPath: "banktransfers/" + guid1 + "/attachments/bean.jpg", args: { mimeType: 'image/jpg', pathToSave: tempAttachmentLocation, entityID: guid1, fileName: 'bean.jpg' } }
        ],
        contacts: [
            { expectedPath: "contacts/" + guid1 + "/attachments/bean.jpg", args: { mimeType: 'image/jpg', pathToSave: tempAttachmentLocation, entityID: guid1, fileName: 'bean.jpg' } }
        ],
        accounts: [
            { expectedPath: "accounts/" + guid1 + "/attachments/bean.jpg", args: { mimeType: 'image/jpg', pathToSave: tempAttachmentLocation, entityID: guid1, fileName: 'bean.jpg' } }
        ],
        manualJournals: [
            { expectedPath: "manualjournals/" + guid1 + "/attachments/bean.jpg", args: { mimeType: 'image/jpg', pathToSave: tempAttachmentLocation, entityID: guid1, fileName: 'bean.jpg' } }
        ]
    };
    Object.keys(fixtures).map(function (endpoint) {
        (fixtures[endpoint]).map(function (fixture) {
            describe(endpoint + " attachments & downloadAttachment calls", function () {
                var result;
                beforeAll(function () { return __awaiter(_this, void 0, void 0, function () {
                    var streamToUse, xeroClient;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                jest.resetAllMocks();
                                streamToUse = fs.createReadStream(path.resolve(__dirname, 'helpers/bean.jpg'));
                                writeBinaryResponseToStreamSpy.mockImplementation(function (endpointPath, mimeType, writeStream) {
                                    return new Promise(function (resolve, reject) {
                                        streamToUse.pipe(writeStream);
                                        streamToUse.on('end', function () {
                                            resolve();
                                        });
                                    });
                                });
                                xeroClient = new AccountingAPIClient_1.AccountingAPIClient(xeroConfig, null, oAuth1HttpClient);
                                return [4 /*yield*/, xeroClient[endpoint]['attachments'].downloadAttachment(fixture.args)];
                            case 1:
                                result = _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
                it("calls the underlying HTTPClient method", function () {
                    expect(writeBinaryResponseToStreamSpy).toHaveBeenCalledTimes(1);
                });
                it("calls HTTPClient with endpoint=" + fixture.expectedPath, function () {
                    expect(writeBinaryResponseToStreamSpy.mock.calls[0][0]).toEqual(fixture.expectedPath);
                });
                it("calls HTTPClient with mimeType=" + fixture.args.mimeType, function () {
                    expect(writeBinaryResponseToStreamSpy.mock.calls[0][1]).toEqual(fixture.args.mimeType);
                });
                it("calls HTTPClient with writeStream path=" + tempAttachmentLocation, function () {
                    var writeStream = writeBinaryResponseToStreamSpy.mock.calls[0][2];
                    expect(writeStream).toHaveProperty('path');
                    expect(writeStream.path).toEqual(tempAttachmentLocation);
                });
                it('result is undefined', function () {
                    expect(result).toBeUndefined();
                });
                it('saves attachment to disk', function () { return __awaiter(_this, void 0, void 0, function () {
                    var stat;
                    return __generator(this, function (_a) {
                        expect(fs.existsSync(tempAttachmentLocation)).toBeTruthy();
                        stat = fs.statSync(tempAttachmentLocation);
                        expect(stat.size).toBe(23951);
                        return [2 /*return*/];
                    });
                }); });
                afterAll(function () {
                    fs.unlinkSync(tempAttachmentLocation);
                });
            });
            describe(endpoint + " attachments & uploading attachment", function () {
                var response;
                beforeAll(function () { return __awaiter(_this, void 0, void 0, function () {
                    var xeroClient;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                jest.resetAllMocks();
                                readStreamToRequestSpy.mockImplementation(function (endpointPath, mimeType, size, writeStream) {
                                    return new Promise(function (resolve, reject) {
                                        resolve();
                                    });
                                });
                                xeroClient = new AccountingAPIClient_1.AccountingAPIClient(xeroConfig, null, oAuth1HttpClient);
                                return [4 /*yield*/, xeroClient[endpoint]['attachments'].uploadAttachment({
                                        entityID: fixture.args.entityID,
                                        mimeType: fixture.args.mimeType,
                                        fileName: fixture.args.fileName,
                                        pathToUpload: localAttachmentLocation
                                    })];
                            case 1:
                                response = _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
                it("calls the underlying HTTPClient method", function () {
                    expect(readStreamToRequestSpy).toHaveBeenCalledTimes(1);
                });
                it("calls HTTPClient with endpoint=" + fixture.expectedPath, function () {
                    expect(readStreamToRequestSpy.mock.calls[0][0]).toEqual(fixture.expectedPath);
                });
                it("calls HTTPClient with mimeType=" + fixture.args.mimeType, function () {
                    expect(readStreamToRequestSpy.mock.calls[0][1]).toEqual(fixture.args.mimeType);
                });
                it("calls HTTPClient with correct size", function () {
                    expect(readStreamToRequestSpy.mock.calls[0][2]).toEqual(23951);
                });
                it("calls HTTPClient with readStream path=" + localAttachmentLocation, function () {
                    var readStream = readStreamToRequestSpy.mock.calls[0][3];
                    expect(readStream).toHaveProperty('path');
                    expect(readStream.path).toEqual(localAttachmentLocation);
                });
                it('result is undefined', function () {
                    expect(response).toBeUndefined();
                });
            });
        });
    });
});
