"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var XeroError_1 = require("../XeroError");
var util_1 = require("util");
// tests based on https://gist.github.com/justmoon/15511f92e5216fa2624b
describe('XeroError', function () {
    var fixtures = [
        {
            expectedMessage: 'XeroError: token_rejected (Fix the problem)',
            statusCode: 502,
            data: 'oauth_problem=token_rejected&oauth_problem_advice=Fix%20the%20problem'
        },
        {
            expectedMessage: 'XeroError: statusCode=404 data=It went bad!',
            statusCode: 404,
            data: 'It went bad!'
        },
        {
            expectedMessage: 'XeroError: statusCode=404 data=It went bad!',
            statusCode: 404,
            data: 'It went bad!',
            headers: null
        },
        {
            expectedMessage: 'XeroError: Minute rate limit exceeded (please wait before retrying the xero api)',
            statusCode: 503,
            data: 'oauth_problem=rate%20limit%20exceeded&oauth_problem_advice=please%20wait%20before%20retrying%20the%20xero%20api',
            headers: { 'x-rate-limit-problem': 'Minute' }
        }
    ];
    fixtures.map(function (fixture) {
        describe(fixture.expectedMessage, function () {
            var error;
            beforeAll(function () {
                error = new XeroError_1.XeroError(fixture.statusCode, fixture.data, fixture.headers);
            });
            it("instanceof XeroError", function () {
                expect(error instanceof XeroError_1.XeroError).toBe(true);
            });
            it('instanceof Error', function () {
                expect(error instanceof Error).toBe(true);
            });
            it('isError()', function () {
                expect(util_1.isError(error)).toBe(true);
            });
            it('message is as expected', function () {
                expect(error.message).toEqual(fixture.expectedMessage);
            });
            it('stack is defined', function () {
                expect(error.stack).toBeDefined();
            });
            it('stack starts with message', function () {
                expect(error.stack.split('\n')[0]).toEqual('Error: ' + fixture.expectedMessage);
            });
            it('stack records thrown location', function () {
                expect(error.stack.split('\n')[2]).toContain('XeroError.tests.');
            });
            it('statusCode is set', function () {
                expect(error.statusCode).toEqual(fixture.statusCode);
            });
            it('data is set', function () {
                expect(error.data).toEqual(fixture.data);
            });
            it('headers is set', function () {
                expect(error.headers).toEqual(fixture.headers);
            });
        });
    });
});
