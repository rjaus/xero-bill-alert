"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var AccountingAPIClient_1 = require("../AccountingAPIClient");
var integration_helpers_1 = require("./helpers/integration.helpers");
var test_assertions_1 = require("./helpers/test-assertions");
var entityId_helpers_1 = require("./helpers/entityId.helpers");
describe('/contactgroups', function () {
    var xero;
    var _idsToDelete = [];
    beforeAll(function () { return __awaiter(_this, void 0, void 0, function () {
        var config;
        return __generator(this, function (_a) {
            integration_helpers_1.setJestTimeout();
            config = integration_helpers_1.getPrivateConfig();
            xero = new AccountingAPIClient_1.AccountingAPIClient(config);
            return [2 /*return*/];
        });
    }); });
    it('get single', function () { return __awaiter(_this, void 0, void 0, function () {
        var response, _a, _b, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _b = (_a = xero.contactgroups).get;
                    _c = {};
                    return [4 /*yield*/, entityId_helpers_1.getOrCreateContactGroupId(xero)];
                case 1: return [4 /*yield*/, _b.apply(_a, [(_c.ContactGroupID = _d.sent(), _c)])];
                case 2:
                    response = _d.sent();
                    expect(response).not.toBeNull();
                    expect(test_assertions_1.isUUID(response.Id)).toBeTruthy();
                    expect(response.ContactGroups.length).toBe(1);
                    return [2 /*return*/];
            }
        });
    }); });
    it('get all', function () { return __awaiter(_this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, xero.contactgroups.get()];
                case 1:
                    response = _a.sent();
                    expect(response).not.toBeNull();
                    expect(test_assertions_1.isUUID(response.Id)).toBeTruthy();
                    expect(response.ContactGroups.length).toBeGreaterThan(0);
                    return [2 /*return*/];
            }
        });
    }); });
    it('create', function () { return __awaiter(_this, void 0, void 0, function () {
        var uniqueName, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    uniqueName = 'NewContactGroup' + new Date().getTime();
                    return [4 /*yield*/, xero.contactgroups.create({
                            Name: uniqueName,
                            Status: 'ACTIVE'
                        })];
                case 1:
                    response = _a.sent();
                    _idsToDelete = _idsToDelete.concat(response.ContactGroups[0].ContactGroupID);
                    expect(response).not.toBeNull();
                    expect(test_assertions_1.isUUID(response.ContactGroups[0].ContactGroupID)).toBeTruthy();
                    expect(response.ContactGroups[0].Name).toBe(uniqueName);
                    return [2 /*return*/];
            }
        });
    }); });
    it('delete', function () { return __awaiter(_this, void 0, void 0, function () {
        var response, _a, _b, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _b = (_a = xero.contactgroups).update;
                    _c = {};
                    return [4 /*yield*/, entityId_helpers_1.getOrCreateContactGroupId(xero, false)];
                case 1: return [4 /*yield*/, _b.apply(_a, [(_c.ContactGroupID = _d.sent(),
                            _c.Status = 'DELETED',
                            _c)])];
                case 2:
                    response = _d.sent();
                    expect(response).not.toBeNull();
                    expect(response.ContactGroups.length).toBe(1);
                    expect(response.ContactGroups[0].Status).toBe('DELETED');
                    return [2 /*return*/];
            }
        });
    }); });
    describe('contacts', function () { return __awaiter(_this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            it('add to group', function () { return __awaiter(_this, void 0, void 0, function () {
                var contactId, response, _a, _b, _c, _d;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0: return [4 /*yield*/, entityId_helpers_1.getOrCreateContactId(xero)];
                        case 1:
                            contactId = _e.sent();
                            _b = (_a = xero.contactgroups.contacts).create;
                            _c = [{ ContactID: contactId }];
                            _d = {};
                            return [4 /*yield*/, entityId_helpers_1.getOrCreateContactGroupId(xero)];
                        case 2: return [4 /*yield*/, _b.apply(_a, _c.concat([(_d.ContactGroupID = _e.sent(), _d)]))];
                        case 3:
                            response = _e.sent();
                            expect(response.Contacts.length).toBe(1);
                            return [2 /*return*/];
                    }
                });
            }); });
            it('delete all from group', function () { return __awaiter(_this, void 0, void 0, function () {
                var contactGroupId, response, getResponse;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, entityId_helpers_1.getOrCreateContactGroupId(xero)];
                        case 1:
                            contactGroupId = _a.sent();
                            return [4 /*yield*/, xero.contactgroups.contacts.delete({ ContactGroupID: contactGroupId })];
                        case 2:
                            response = _a.sent();
                            expect(response).toBeNull();
                            return [4 /*yield*/, xero.contactgroups.get({ ContactGroupID: contactGroupId })];
                        case 3:
                            getResponse = _a.sent();
                            expect(getResponse.ContactGroups[0].Contacts.length).toBe(0);
                            return [2 /*return*/];
                    }
                });
            }); });
            it('delete single from group', function () { return __awaiter(_this, void 0, void 0, function () {
                var contactGroupId, contactId, response, getResponse;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, entityId_helpers_1.getOrCreateContactGroupId(xero)];
                        case 1:
                            contactGroupId = _a.sent();
                            return [4 /*yield*/, entityId_helpers_1.getOrCreateContactIdInContactGroup(xero, contactGroupId)];
                        case 2:
                            contactId = _a.sent();
                            expect.assertions(2);
                            return [4 /*yield*/, xero.contactgroups.contacts.delete({ ContactGroupID: contactGroupId, ContactID: contactId })];
                        case 3:
                            response = _a.sent();
                            expect(response).toBeNull();
                            return [4 /*yield*/, xero.contactgroups.get({ ContactGroupID: contactGroupId })];
                        case 4:
                            getResponse = _a.sent();
                            expect(getResponse.ContactGroups[0].Contacts.map(function (contact) { return contact.ContactID; })).not.toContainEqual(contactId);
                            return [2 /*return*/];
                    }
                });
            }); });
            return [2 /*return*/];
        });
    }); });
    afterAll(function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Promise.all(_idsToDelete.map(function (id) { return xero.contactgroups.update({
                        ContactGroupID: id,
                        Status: 'DELETED'
                    }); }))];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
});
