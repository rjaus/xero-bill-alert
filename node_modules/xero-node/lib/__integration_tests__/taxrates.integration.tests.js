"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var AccountingAPIClient_1 = require("../AccountingAPIClient");
var integration_helpers_1 = require("./helpers/integration.helpers");
describe('/taxrates', function () {
    var xero;
    beforeAll(function () { return __awaiter(_this, void 0, void 0, function () {
        var config;
        return __generator(this, function (_a) {
            integration_helpers_1.setJestTimeout();
            config = integration_helpers_1.getPrivateConfig();
            xero = new AccountingAPIClient_1.AccountingAPIClient(config);
            return [2 /*return*/];
        });
    }); });
    it('update', function () { return __awaiter(_this, void 0, void 0, function () {
        var rate, response, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    rate = {
                        Name: 'Node Tax',
                        TaxType: 'INPUT',
                        ReportTaxType: 'INPUT',
                        TaxComponents: [{
                                Name: 'Tech Debt Tax',
                                Rate: 17.5,
                                IsCompound: false,
                                IsNonRecoverable: false
                            }]
                    };
                    expect.assertions(2);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, xero.taxRates.update(rate)];
                case 2:
                    response = _a.sent();
                    expect(response.TaxRates).toBeInstanceOf(Array);
                    expect(response.TaxRates[0]).toHaveProperty('Name', 'Node Tax');
                    return [3 /*break*/, 4];
                case 3:
                    err_1 = _a.sent();
                    // updating fails in Circle so we'll just check its a validation error
                    expect(err_1.statusCode).toBe(400);
                    expect(err_1.statusCode).toBe(400);
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); });
    it('get all', function () { return __awaiter(_this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, xero.taxRates.get()];
                case 1:
                    response = _a.sent();
                    expect(response).not.toBeNull();
                    expect(response.TaxRates).toBeInstanceOf(Array);
                    expect(response.TaxRates[0]).toHaveProperty('Name');
                    expect(response.TaxRates[0]).toHaveProperty('TaxType');
                    return [2 /*return*/];
            }
        });
    }); });
});
