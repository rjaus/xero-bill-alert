"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var AccountingAPIClient_1 = require("../AccountingAPIClient");
var puppeteer = require("puppeteer");
var integration_helpers_1 = require("./helpers/integration.helpers");
integration_helpers_1.setJestTimeout();
// We cannot run this and the other example in parallel as one de-auths the other
describe('Partner Example Tests using oauth_verifier', function () {
    var USERNAME_SELECTOR = '#email';
    var PASSWORD_SELECTOR = '#password';
    var LOGIN_BUTTON_SELECTOR = '#submitButton';
    var AUTH_BUTTON_SELECTOR = '#submit-button';
    var password_config = integration_helpers_1.getLoginConfig();
    var config = integration_helpers_1.getPartnerAppConfig();
    var accounting1 = new AccountingAPIClient_1.AccountingAPIClient(config);
    var authUrl;
    var requestToken;
    var authState;
    var page;
    var oauth_verifier;
    beforeAll(function () { return __awaiter(_this, void 0, void 0, function () {
        var browser;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, accounting1.oauth1Client.getRequestToken()];
                case 1:
                    requestToken = _a.sent();
                    authUrl = accounting1.oauth1Client.buildAuthoriseUrl(requestToken);
                    return [4 /*yield*/, puppeteer.launch({
                            headless: true,
                        })];
                case 2:
                    browser = _a.sent();
                    return [4 /*yield*/, browser.newPage()];
                case 3:
                    page = _a.sent();
                    return [4 /*yield*/, page.goto(authUrl)];
                case 4:
                    _a.sent();
                    // /user logs into Xero and Auths your app
                    return [4 /*yield*/, page.click(USERNAME_SELECTOR)];
                case 5:
                    // /user logs into Xero and Auths your app
                    _a.sent();
                    return [4 /*yield*/, page.keyboard.type(password_config.userName)];
                case 6:
                    _a.sent();
                    return [4 /*yield*/, page.click(PASSWORD_SELECTOR)];
                case 7:
                    _a.sent();
                    return [4 /*yield*/, page.keyboard.type(password_config.password)];
                case 8:
                    _a.sent();
                    return [4 /*yield*/, page.click(LOGIN_BUTTON_SELECTOR)];
                case 9:
                    _a.sent();
                    return [4 /*yield*/, page.waitForNavigation()];
                case 10:
                    _a.sent();
                    return [4 /*yield*/, page.waitForNavigation()];
                case 11:
                    _a.sent();
                    return [4 /*yield*/, page.click(AUTH_BUTTON_SELECTOR)];
                case 12:
                    _a.sent();
                    return [4 /*yield*/, delay(2500)];
                case 13:
                    _a.sent();
                    return [4 /*yield*/, page.evaluate(function () {
                            var PIN_SELECTOR = '#pin-input';
                            var query = document.querySelector(PIN_SELECTOR).value;
                            return query;
                        })];
                case 14:
                    // The pin is usually sent to your callback url, in this example,
                    // callback url is set to null
                    oauth_verifier = _a.sent();
                    browser.close();
                    return [2 /*return*/];
            }
        });
    }); });
    it('it returns the authorised url', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            expect(authUrl).toContain('xero.com');
            return [2 /*return*/];
        });
    }); });
    it('it returns a PIN when the user allows access to the app', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            expect(oauth_verifier).not.toBeNull();
            return [2 /*return*/];
        });
    }); });
    it('it can make a successful API call', function () { return __awaiter(_this, void 0, void 0, function () {
        var inv1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, accounting1.oauth1Client.swapRequestTokenforAccessToken(requestToken, oauth_verifier)];
                case 1:
                    authState = _a.sent();
                    return [4 /*yield*/, accounting1.organisation.get()];
                case 2:
                    inv1 = _a.sent();
                    expect(inv1.Status).toEqual('OK');
                    return [2 /*return*/];
            }
        });
    }); });
    it('it can still make a successfull API call after refreshing the access token', function () { return __awaiter(_this, void 0, void 0, function () {
        var inv2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, accounting1.oauth1Client.refreshAccessToken()];
                case 1:
                    authState = _a.sent();
                    return [4 /*yield*/, accounting1.organisation.get()];
                case 2:
                    inv2 = _a.sent();
                    expect(inv2.Status).toEqual('OK');
                    return [2 /*return*/];
            }
        });
    }); });
    describe('OAuth State', function () {
        var accounting2;
        it('it allows you to keep copy of the state in your own dadtastore', function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // Saves your state to your datastore
                expect(authState).not.toBeNull();
                expect(authState.oauth_session_handle).not.toBeNull();
                expect(requestToken).not.toBeNull();
                // This is how you can check when you have to refresh your Access Token
                expect(typeof authState.oauth_expires_at.getDate).toBe('function');
                return [2 /*return*/];
            });
        }); });
        it('it allows you to restore a new instance of the client next time your user logs in', function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                accounting2 = new AccountingAPIClient_1.AccountingAPIClient(config, authState);
                return [2 /*return*/];
            });
        }); });
        it('it lets you make API calls using the restored state', function () { return __awaiter(_this, void 0, void 0, function () {
            var inv3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, accounting2.organisation.get()];
                    case 1:
                        inv3 = _a.sent();
                        expect(inv3.Status).toEqual('OK');
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
function delay(timeout) {
    return new Promise(function (resolve) {
        setTimeout(resolve, timeout);
    });
}
