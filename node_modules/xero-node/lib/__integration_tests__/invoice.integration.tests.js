"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var AccountingAPIClient_1 = require("../AccountingAPIClient");
var invoice_request_examples_1 = require("./request-body/invoice.request.examples");
var integration_helpers_1 = require("./helpers/integration.helpers");
integration_helpers_1.setJestTimeout();
describe('Invoices endpoint', function () {
    describe('as Private app', function () {
        var xero;
        var invoiceIds = [];
        var tmpDownloadFile = path.resolve(__dirname, './temp_result.pdf');
        beforeAll(function () {
            integration_helpers_1.setJestTimeout();
            var config = integration_helpers_1.getPrivateConfig();
            xero = new AccountingAPIClient_1.AccountingAPIClient(config);
        });
        it('create single', function () { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, xero.invoices.create(invoice_request_examples_1.createSingleInvoiceRequest)];
                    case 1:
                        response = _a.sent();
                        invoiceIds = invoiceIds.concat(response.Invoices.map(function (invoice) { return invoice.InvoiceID; }));
                        expect(response.Invoices.length).toBe(1);
                        expect(response.Invoices[0].InvoiceID).toBeTruthy();
                        return [2 /*return*/];
                }
            });
        }); });
        // skip: we don't ever delete invoices from Xero, so let's limit the number we create
        it.skip('create multiple', function () { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, xero.invoices.create(invoice_request_examples_1.createMultipleInvoiceRequest)];
                    case 1:
                        response = _a.sent();
                        invoiceIds = invoiceIds.concat(response.Invoices.map(function (invoice) { return invoice.InvoiceID; }));
                        expect(response.Invoices.length).toBe(invoice_request_examples_1.createMultipleInvoiceRequest.Invoices.length);
                        expect(response.Invoices[0].InvoiceID).toBeTruthy();
                        expect(response.Invoices[1].InvoiceID).toBeTruthy();
                        return [2 /*return*/];
                }
            });
        }); });
        it('get all', function () { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, xero.invoices.get()];
                    case 1:
                        response = _a.sent();
                        expect(response).toBeDefined();
                        expect(response.Id).toBeTruthy();
                        expect(response.Invoices.length).toBeGreaterThanOrEqual(invoiceIds.length);
                        expect(response.Invoices[0].InvoiceID).toBeTruthy();
                        return [2 /*return*/];
                }
            });
        }); });
        it('get single', function () { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, xero.invoices.get({ InvoiceID: invoiceIds[0] })];
                    case 1:
                        response = _a.sent();
                        expect(response).toBeDefined();
                        expect(response.Id).toBeTruthy();
                        expect(response.Invoices).toHaveLength(1);
                        expect(response.Invoices[0].InvoiceID).toBe(invoiceIds[0]);
                        return [2 /*return*/];
                }
            });
        }); });
        it('get single as pdf', function () { return __awaiter(_this, void 0, void 0, function () {
            var response, invoiceBuffer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, xero.invoices.savePDF({ InvoiceID: invoiceIds[0], savePath: tmpDownloadFile })];
                    case 1:
                        response = _a.sent();
                        expect(response).toBeUndefined();
                        invoiceBuffer = fs.readFileSync(tmpDownloadFile);
                        expect(invoiceBuffer.byteLength).toBeGreaterThan(3000); // Let's hope all PDFs are bigger than 3000B
                        return [2 /*return*/];
                }
            });
        }); });
        describe('Invalid requests', function () {
            it('creating an invalid invoice', function () { return __awaiter(_this, void 0, void 0, function () {
                var createInvalidInvoiceRequest, response;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            createInvalidInvoiceRequest = __assign({}, invoice_request_examples_1.createSingleInvoiceRequest, { Type: 'ImNotARealType' });
                            return [4 /*yield*/, xero.invoices.create(createInvalidInvoiceRequest)];
                        case 1:
                            response = _a.sent();
                            invoiceIds = invoiceIds.concat(response.Invoices.map(function (invoice) { return invoice.InvoiceID; }));
                            expect(response.Invoices).toHaveLength(1);
                            expect(response.Invoices[0].HasErrors).toBeTruthy();
                            expect(response.Invoices[0].ValidationErrors.length).toBeGreaterThanOrEqual(1);
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        afterAll(function () { return __awaiter(_this, void 0, void 0, function () {
            var updateRequestBody;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // delete the file
                        fs.unlinkSync(tmpDownloadFile);
                        updateRequestBody = invoiceIds.map(function (invoiceId) { return ({ InvoiceID: invoiceId, Status: 'DELETED' }); });
                        return [4 /*yield*/, xero.invoices.updateMultiple(updateRequestBody)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
