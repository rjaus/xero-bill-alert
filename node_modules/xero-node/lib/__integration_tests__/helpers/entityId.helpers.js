"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var invoice_request_examples_1 = require("../request-body/invoice.request.examples");
var inMemoryCache = {};
function getOrCreateAccountId(xero, args) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(!inMemoryCache.accountId || args)) return [3 /*break*/, 4];
                    return [4 /*yield*/, xero.accounts.get(args)];
                case 1:
                    response = _a.sent();
                    if (!(response.Accounts.length <= 0)) return [3 /*break*/, 3];
                    return [4 /*yield*/, xero.accounts.create({ Name: 'AmyTest', Code: 200, Type: 'BANK', BankAccountNumber: '00-12345-678-00' })];
                case 2:
                    response = _a.sent();
                    _a.label = 3;
                case 3:
                    inMemoryCache.accountId = response.Accounts[0].AccountID;
                    _a.label = 4;
                case 4: return [2 /*return*/, inMemoryCache.accountId];
            }
        });
    });
}
exports.getOrCreateAccountId = getOrCreateAccountId;
function getOrCreateBankTransferId(xero) {
    return __awaiter(this, void 0, void 0, function () {
        var response, fromAccountId, toAccountId;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!!inMemoryCache.bankTransferId) return [3 /*break*/, 6];
                    return [4 /*yield*/, xero.bankTransfers.get()];
                case 1:
                    response = _a.sent();
                    if (!(response.BankTransfers.length <= 0)) return [3 /*break*/, 5];
                    return [4 /*yield*/, getOrCreateAccountId(xero, { where: 'Type=="BANK"' })];
                case 2:
                    fromAccountId = _a.sent();
                    return [4 /*yield*/, getOrCreateAccountId(xero, { where: "Type==\"BANK\"&&AccountID!=GUID(\"" + fromAccountId + "\")" })];
                case 3:
                    toAccountId = _a.sent();
                    return [4 /*yield*/, xero.bankTransfers.create({
                            FromBankAccount: { AccountID: fromAccountId },
                            ToBankAccount: { AccountID: toAccountId },
                            Amount: 123
                        })];
                case 4:
                    response = _a.sent();
                    _a.label = 5;
                case 5:
                    inMemoryCache.bankTransferId = response.BankTransfers[0].BankTransferID;
                    _a.label = 6;
                case 6: return [2 /*return*/, inMemoryCache.bankTransferId];
            }
        });
    });
}
exports.getOrCreateBankTransferId = getOrCreateBankTransferId;
function getOrCreateContactGroupId(xero, useCache) {
    if (useCache === void 0) { useCache = true; }
    return __awaiter(this, void 0, void 0, function () {
        var response, contactGroupId;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(!inMemoryCache.contactGroupId || !useCache)) return [3 /*break*/, 4];
                    return [4 /*yield*/, xero.contactgroups.get()];
                case 1:
                    response = _a.sent();
                    if (!(response.ContactGroups.length <= 0)) return [3 /*break*/, 3];
                    return [4 /*yield*/, xero.contactgroups.create({ Name: 'xero-node test' })];
                case 2:
                    response = _a.sent();
                    _a.label = 3;
                case 3:
                    contactGroupId = response.ContactGroups[0].ContactGroupID;
                    if (!useCache) {
                        return [2 /*return*/, contactGroupId];
                    }
                    else {
                        inMemoryCache.contactGroupId = contactGroupId;
                    }
                    _a.label = 4;
                case 4: return [2 /*return*/, inMemoryCache.contactGroupId];
            }
        });
    });
}
exports.getOrCreateContactGroupId = getOrCreateContactGroupId;
function getOrCreateContactId(xero) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!!inMemoryCache.contactId) return [3 /*break*/, 4];
                    return [4 /*yield*/, xero.contacts.get()];
                case 1:
                    response = _a.sent();
                    if (!(response.Contacts.length <= 0)) return [3 /*break*/, 3];
                    return [4 /*yield*/, xero.contacts.create({ FirstName: 'xero-node test', LastName: 'Tee' + Date.now() })];
                case 2:
                    response = _a.sent();
                    _a.label = 3;
                case 3:
                    inMemoryCache.contactId = response.Contacts[0].ContactID;
                    _a.label = 4;
                case 4: return [2 /*return*/, inMemoryCache.contactId];
            }
        });
    });
}
exports.getOrCreateContactId = getOrCreateContactId;
function getOrCreateContactIdInContactGroup(xero, contactGroupId) {
    return __awaiter(this, void 0, void 0, function () {
        var getResponse, contactId, createResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!!inMemoryCache.contactIdInContactGroup) return [3 /*break*/, 5];
                    return [4 /*yield*/, xero.contactgroups.get({ ContactGroupID: contactGroupId })];
                case 1:
                    getResponse = _a.sent();
                    if (!(getResponse.ContactGroups[0].Contacts.length <= 0)) return [3 /*break*/, 4];
                    return [4 /*yield*/, getOrCreateContactId(xero)];
                case 2:
                    contactId = _a.sent();
                    return [4 /*yield*/, xero.contactgroups.contacts.create({ ContactID: contactId }, { ContactGroupID: contactGroupId })];
                case 3:
                    createResponse = _a.sent();
                    inMemoryCache.contactIdInContactGroup = createResponse.Contacts[0].ContactID;
                    return [3 /*break*/, 5];
                case 4:
                    inMemoryCache.contactIdInContactGroup = getResponse.ContactGroups[0].Contacts[0].ContactID;
                    _a.label = 5;
                case 5: return [2 /*return*/, inMemoryCache.contactIdInContactGroup];
            }
        });
    });
}
exports.getOrCreateContactIdInContactGroup = getOrCreateContactIdInContactGroup;
function getOrCreateEmployeeId(xero) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!!inMemoryCache.employeeId) return [3 /*break*/, 4];
                    return [4 /*yield*/, xero.employees.get()];
                case 1:
                    response = _a.sent();
                    if (!(response.Employees.length <= 0)) return [3 /*break*/, 3];
                    return [4 /*yield*/, xero.employees.create({ FirstName: 'Bryan', LastName: 'Dubb-liu' })];
                case 2:
                    response = _a.sent();
                    _a.label = 3;
                case 3:
                    inMemoryCache.employeeId = response.Employees[0].EmployeeID;
                    _a.label = 4;
                case 4: return [2 /*return*/, inMemoryCache.employeeId];
            }
        });
    });
}
exports.getOrCreateEmployeeId = getOrCreateEmployeeId;
function getOrCreateExpenseClaimId(xero) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!!inMemoryCache.expenseClaimId) return [3 /*break*/, 4];
                    return [4 /*yield*/, xero.expenseclaims.get()];
                case 1:
                    response = _a.sent();
                    if (!(response.ExpenseClaims.length <= 0)) return [3 /*break*/, 3];
                    return [4 /*yield*/, xero.expenseclaims.create({ AmountDue: 1 })];
                case 2:
                    response = _a.sent();
                    _a.label = 3;
                case 3:
                    inMemoryCache.expenseClaimId = response.ExpenseClaims[0].ExpenseClaimID;
                    _a.label = 4;
                case 4: return [2 /*return*/, inMemoryCache.expenseClaimId];
            }
        });
    });
}
exports.getOrCreateExpenseClaimId = getOrCreateExpenseClaimId;
function getOrCreateInvoiceId(xero) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!!inMemoryCache.invoiceId) return [3 /*break*/, 4];
                    return [4 /*yield*/, xero.invoices.get()];
                case 1:
                    response = _a.sent();
                    if (!(response.Invoices.length <= 0)) return [3 /*break*/, 3];
                    return [4 /*yield*/, xero.invoices.create(invoice_request_examples_1.createSingleInvoiceRequest)];
                case 2:
                    response = _a.sent();
                    _a.label = 3;
                case 3:
                    inMemoryCache.invoiceId = response.Invoices[0].InvoiceID;
                    _a.label = 4;
                case 4: return [2 /*return*/, inMemoryCache.invoiceId];
            }
        });
    });
}
exports.getOrCreateInvoiceId = getOrCreateInvoiceId;
function getOrCreateItemId(xero) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!!inMemoryCache.itemId) return [3 /*break*/, 4];
                    return [4 /*yield*/, xero.items.get()];
                case 1:
                    response = _a.sent();
                    if (!(response.Items.length <= 0)) return [3 /*break*/, 3];
                    return [4 /*yield*/, xero.items.create({ Code: 'Item-1' })];
                case 2:
                    response = _a.sent();
                    _a.label = 3;
                case 3:
                    inMemoryCache.itemId = response.Items[0].ItemID;
                    _a.label = 4;
                case 4: return [2 /*return*/, inMemoryCache.itemId];
            }
        });
    });
}
exports.getOrCreateItemId = getOrCreateItemId;
function getOrCreatePaymentId(xero) {
    return __awaiter(this, void 0, void 0, function () {
        var response, _a, _b, _c, _d, _e;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    if (!!inMemoryCache.paymentId) return [3 /*break*/, 6];
                    return [4 /*yield*/, xero.payments.get()];
                case 1:
                    response = _f.sent();
                    if (!(response.Payments.length <= 0)) return [3 /*break*/, 5];
                    _b = (_a = xero.payments).create;
                    _c = {};
                    _d = {};
                    return [4 /*yield*/, getOrCreateInvoiceId(xero)];
                case 2:
                    _c.Invoice = (_d.InvoiceID = _f.sent(), _d);
                    _e = {};
                    return [4 /*yield*/, getOrCreateAccountId(xero)];
                case 3: return [4 /*yield*/, _b.apply(_a, [(_c.Account = (_e.AccountID = _f.sent(), _e),
                            _c.Amount = 123,
                            _c)])];
                case 4:
                    response = _f.sent();
                    _f.label = 5;
                case 5:
                    inMemoryCache.paymentId = response.Payments[0].PaymentID;
                    _f.label = 6;
                case 6: return [2 /*return*/, inMemoryCache.paymentId];
            }
        });
    });
}
exports.getOrCreatePaymentId = getOrCreatePaymentId;
